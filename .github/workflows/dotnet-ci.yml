name: .NET Build & Split Tests

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  SOLUTION: AzureBatchJobAutomation.sln
  DOTNET_VERSION: '8.0.x'

jobs:
  build:
    name: Build (Release)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore
        run: dotnet restore ${{ env.SOLUTION }}

      - name: Build
        run: dotnet build ${{ env.SOLUTION }} --no-restore --configuration Release

  test-batch-validator:
    name: Tests â€¢ BatchValidatorTests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      # 1) Verify at least one test matches the filter
      - name: Assert tests exist for BatchValidatorTests
        shell: bash
        run: |
          set -e
          cnt=$(dotnet test ${{ env.SOLUTION }} --no-build --list-tests --filter "FullyQualifiedName~BatchValidatorTests" | grep -E "^\s*[0-9]+\." | wc -l || true)
          echo "Discovered tests: $cnt"
          if [ "$cnt" -eq 0 ]; then
            echo "No tests matched filter: FullyQualifiedName~BatchValidatorTests"
            exit 1
          fi

      # 2) Run tests and generate TRX + coverage
      - name: Test (only BatchValidatorTests)
        run: |
          dotnet test ${{ env.SOLUTION }} \
            --configuration Release --no-build \
            --filter "FullyQualifiedName~BatchValidatorTests" \
            --logger "trx" \
            --collect "XPlat Code Coverage"

      # 3) Gather artifacts (TRX + coverage)
      - name: Gather artifacts
        shell: bash
        run: |
          mkdir -p artifacts/testresults artifacts/coverage
          # TRX from any test project
          find . -type f -path "*/TestResults/*.trx" -exec cp {} artifacts/testresults/ \; || true
          # Coverage (Cobertura)
          find . -type f -path "*/TestResults/*/coverage.cobertura.xml" -exec cp {} artifacts/coverage/ \; || true
          # Ensure something exists so the artifact is created
          if [ -z "$(ls -A artifacts/testresults 2>/dev/null)" ]; then
            echo "No TRX produced (check test filter/results)" > artifacts/testresults/no-tests.txt
          fi

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-batchvalidator
          path: artifacts/testresults
          if-no-files-found: warn

      - name: Upload Coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-batchvalidator
          path: artifacts/coverage
          if-no-files-found: warn

  test-integration:
    name: Tests â€¢ IntegrationTests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Assert tests exist for IntegrationTests
        shell: bash
        run: |
          set -e
          cnt=$(dotnet test ${{ env.SOLUTION }} --no-build --list-tests --filter "FullyQualifiedName~IntegrationTests" | grep -E "^\s*[0-9]+\." | wc -l || true)
          echo "Discovered tests: $cnt"
          if [ "$cnt" -eq 0 ]; then
            echo "No tests matched filter: FullyQualifiedName~IntegrationTests"
            exit 1
          fi

      - name: Test (only IntegrationTests)
        run: |
          dotnet test ${{ env.SOLUTION }} \
            --configuration Release --no-build \
            --filter "FullyQualifiedName~IntegrationTests" \
            --logger "trx" \
            --collect "XPlat Code Coverage"

      - name: Gather artifacts
        shell: bash
        run: |
          mkdir -p artifacts/testresults artifacts/coverage
          find . -type f -path "*/TestResults/*.trx" -exec cp {} artifacts/testresults/ \; || true
          find . -type f -path "*/TestResults/*/coverage.cobertura.xml" -exec cp {} artifacts/coverage/ \; || true
          if [ -z "$(ls -A artifacts/testresults 2>/dev/null)" ]; then
            echo "No TRX produced (check test filter/results)" > artifacts/testresults/no-tests.txt
          fi

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-integration
          path: artifacts/testresults
          if-no-files-found: warn

      - name: Upload Coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-integration
          path: artifacts/coverage
          if-no-files-found: warn

  test-job-executor:
    name: Tests â€¢ JobExecutorTests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Assert tests exist for JobExecutorTests
        shell: bash
        run: |
          set -e
          cnt=$(dotnet test ${{ env.SOLUTION }} --no-build --list-tests --filter "FullyQualifiedName~JobExecutorTests" | grep -E "^\s*[0-9]+\." | wc -l || true)
          echo "Discovered tests: $cnt"
          if [ "$cnt" -eq 0 ]; then
            echo "No tests matched filter: FullyQualifiedName~JobExecutorTests"
            exit 1
          fi

      - name: Test (only JobExecutorTests)
        run: |
          dotnet test ${{ env.SOLUTION }} \
            --configuration Release --no-build \
            --filter "FullyQualifiedName~JobExecutorTests" \
            --logger "trx" \
            --collect "XPlat Code Coverage"

      - name: Gather artifacts
        shell: bash
        run: |
          mkdir -p artifacts/testresults artifacts/coverage
          find . -type f -path "*/TestResults/*.trx" -exec cp {} artifacts/testresults/ \; || true
          find . -type f -path "*/TestResults/*/coverage.cobertura.xml" -exec cp {} artifacts/coverage/ \; || true
          if [ -z "$(ls -A artifacts/testresults 2>/dev/null)" ]; then
            echo "No TRX produced (check test filter/results)" > artifacts/testresults/no-tests.txt
          fi

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-jobexecutor
          path: artifacts/testresults
          if-no-files-found: warn

      - name: Upload Coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-jobexecutor
          path: artifacts/coverage
          if-no-files-found: warn

  summarize:
    name: ðŸ§¾ Summary (Passed / Failed / Skipped)
    runs-on: ubuntu-latest
    needs:
      - test-batch-validator
      - test-integration
      - test-job-executor
    steps:
      - name: Download TRX artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: test-results-*
          merge-multiple: true
          path: downloads/testresults

      - name: Build summary from TRX
        shell: pwsh
        run: |
          $trxFiles = Get-ChildItem -Path "downloads/testresults" -Recurse -Filter *.trx -ErrorAction SilentlyContinue

          if (-not $trxFiles) {
            "## Test Summary`nNo TRX files were downloaded. The earlier jobs may have found 0 matching tests." | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding UTF8
            exit 0
          }

          function N($v) { if ($null -eq $v -or $v -eq "") { 0 } else { [int]$v } }

          $total = 0; $passed = 0; $failed = 0; $skipped = 0
          $rows = @()

          foreach ($f in $trxFiles) {
            try {
              [xml]$xml = Get-Content $f.FullName
              $c = $xml.TestRun.ResultSummary.Counters
              $t_total   = N $c.total
              $t_passed  = N $c.passed
              $t_failed  = (N $c.failed) + (N $c.error)
              $t_skipped = (N $c.notExecuted) + (N $c.inconclusive) + (N $c.notRunnable) + (N $c.pending) + (N $c.aborted) + (N $c.timeout)

              $total  += $t_total
              $passed += $t_passed
              $failed += $t_failed
              $skipped+= $t_skipped

              $rows += "| $($f.Name) | $t_total | $t_passed | $t_failed | $t_skipped |"
            } catch {
              $rows += "| $($f.Name) | (parse error) | - | - | - |"
            }
          }

          "## Test Summary" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding UTF8
          "" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding UTF8
          "**Totals across all jobs**" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding UTF8
          "" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding UTF8
          "| Metric | Count |"      | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding UTF8
          "|---|---:|"              | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding UTF8
          "| Total | $total |"      | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding UTF8
          "| Passed | $passed |"    | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding UTF8
          "| Failed | $failed |"    | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding UTF8
          "| Skipped | $skipped |"  | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding UTF8
          "" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding UTF8
          "**Per-file (job) breakdown**" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding UTF8
          "" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding UTF8
          "| TRX File | Total | Passed | Failed | Skipped |" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding UTF8
          "|---|---:|---:|---:|---:|"                        | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding UTF8
          foreach ($r in $rows) { $r | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding UTF8 }
