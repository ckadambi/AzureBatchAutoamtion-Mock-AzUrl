name: .NET Build & Test (auto-split)

on:
  push:
    branches: ['**']      # all branches
  pull_request:
    branches: ['**']      # all PRs
  workflow_dispatch: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  DOTNET_VERSION: '8.0.x'

jobs:
  prepare:
    name: Detect solution, build, and discover test classes
    runs-on: ubuntu-latest
    outputs:
      solution: ${{ steps.detect.outputs.solution }}
      matrix:   ${{ steps.discover.outputs.matrix }}
      count:    ${{ steps.discover.outputs.count }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Detect solution file (*.sln)
        id: detect
        shell: bash
        run: |
          set -e
          mapfile -t S <<< "$(git ls-files '*.sln')"
          if [ "${#S[@]}" -eq 0 ]; then
            echo "No .sln found at repo root. If your solution is in a subfolder, move it or set a fixed path."
            exit 1
          fi
          # Prefer a solution containing 'Test' or 'Automation' in the name, else take the first
          pick=""
          for f in "${S[@]}"; do
            case "$(basename "$f")" in
              *Test*.sln|*Automation*.sln) pick="$f"; break ;;
            esac
          done
          [ -z "$pick" ] && pick="${S[0]}"
          echo "Using solution: $pick"
          echo "solution=$pick" >> "$GITHUB_OUTPUT"

      - name: Restore
        run: dotnet restore "${{ steps.detect.outputs.solution }}"

      - name: Build (Release)
        run: dotnet build "${{ steps.detect.outputs.solution }}" --no-restore --configuration Release

      - name: List tests & build class matrix (xUnit)
        id: discover
        shell: pwsh
        run: |
          $sln = "${{ steps.detect.outputs.solution }}"
          $out = dotnet test $sln --no-build --list-tests
          if (-not $out) {
            Write-Host "No tests listed."
            $empty = @{ class = @() } | ConvertTo-Json -Compress
            "matrix=$empty" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            "count=0"       | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            exit 0
          }

          # Extract class names from FullyQualifiedName.Method
          $classes = New-Object System.Collections.Generic.HashSet[string]
          foreach ($line in $out) {
            if ([string]::IsNullOrWhiteSpace($line)) { continue }
            if ($line -notmatch "\.") { continue }
            $lastDot = $line.LastIndexOf(".")
            if ($lastDot -lt 1) { continue }
            $classFqn = $line.Substring(0, $lastDot)
            $cls = ($classFqn.Split(".") | Select-Object -Last 1).Trim()
            if ($cls -and $cls -match "Tests$") { $classes.Add($cls) | Out-Null }
          }

          if ($classes.Count -eq 0) {
            Write-Host "No test classes ending with 'Tests' were found."
            $empty = @{ class = @() } | ConvertTo-Json -Compress
            "matrix=$empty" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            "count=0"       | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            exit 0
          }

          $matrixObj = @{ class = @($classes) }
          $json = $matrixObj | ConvertTo-Json -Compress
          Write-Host "Discovered test classes: $(@($classes) -join ', ')"
          "matrix=$json" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "count=$($classes.Count)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

  tests:
    name: Tests â€¢ ${{ matrix.class }}
    needs: prepare
    if: ${{ needs.prepare.outputs.count != '0' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.prepare.outputs.matrix) }}
    env:
      SOLUTION: ${{ needs.prepare.outputs.solution }}
      CLASS:    ${{ matrix.class }}
      DOTNET_VERSION: '8.0.x'
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore
        run: dotnet restore "${{ env.SOLUTION }}"

      - name: Build (Release)
        run: dotnet build "${{ env.SOLUTION }}" --no-restore --configuration Release

      - name: Ensure class exists in test list
        shell: pwsh
        run: |
          $list = dotnet test "${{ env.SOLUTION }}" --no-build --list-tests
          $list | Select-Object -First 100
          # Match ...<anything>.<CLASS>.<Method>
          if ($list -notmatch ("(^|\.){0}\.(?=[^\.]+$|[^\.]+\s*$)|(^|\.){0}\." -f [regex]::Escape($env:CLASS))) {
            throw "No tests found containing class '$env:CLASS'."
          }

      - name: Run tests for class (${{ env.CLASS }})
        run: |
          # xUnit filter: match any FullyQualifiedName that contains the class name
          dotnet test "${{ env.SOLUTION }}" \
            --no-build --configuration Release \
            --filter "FullyQualifiedName~${{ env.CLASS }}" \
            --logger "trx;LogFileName=${{ env.CLASS }}.trx" \
            --collect "XPlat Code Coverage"

      - name: Collect TRX & coverage artifacts
        shell: bash
        run: |
          mkdir -p artifacts/testresults artifacts/coverage
          find . -type f -path "*/TestResults/*.trx" -exec cp {} artifacts/testresults/ \; || true
          find . -type f -path "*/TestResults/*/coverage.cobertura.xml" -exec cp {} artifacts/coverage/ \; || true
          [ -z "$(ls -A artifacts/testresults 2>/dev/null)" ] && echo "No TRX produced for ${CLASS}" > artifacts/testresults/no-tests.txt || true

      - name: Upload TRX
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.class }}
          path: artifacts/testresults
          if-no-files-found: warn

      - name: Upload coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.class }}
          path: artifacts/coverage
          if-no-files-found: warn

  summarize:
    name: Summary (Passed / Failed / Skipped)
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Download TRX artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: test-results-*
          merge-multiple: true
          path: downloads/testresults

      - name: Publish unit test summary
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: downloads/testresults/**/*.trx
          check_name: ".NET Tests Summary"
          comment_mode: off
          fail_on: nothing
