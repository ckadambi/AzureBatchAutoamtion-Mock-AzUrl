name: .NET Build & Test (auto-split by test class)

on:
  push:
    branches: ['**']
  pull_request:
    branches: ['**']
  workflow_dispatch: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  SOLUTION: AzureBatchJobAutomation.sln
  DOTNET_VERSION: '8.0.x'

jobs:
  discover-tests:
    name: Discover test classes
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.discover.outputs.matrix }}
      count:  ${{ steps.discover.outputs.count }}
    steps:
      - uses: actions/checkout@v4

      - name: Find *Tests.cs under /Tests and build matrix
        id: discover
        shell: pwsh
        run: |
          $root = Join-Path $PWD "Tests"
          if (-not (Test-Path $root)) {
            $empty = @{ class = @() } | ConvertTo-Json -Compress
            "matrix=$empty" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            "count=0"       | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            exit 0
          }

          $files = Get-ChildItem -Path $root -Filter '*Tests.cs' -Recurse -ErrorAction SilentlyContinue
          $classes = @()
          foreach ($f in $files) {
            $base = [IO.Path]::GetFileNameWithoutExtension($f.Name)  # e.g. IntegrationTests
            if ($classes -notcontains $base) { $classes += $base }
          }

          $matrixObj = @{ class = $classes }
          $matrixJson = $matrixObj | ConvertTo-Json -Compress
          "matrix=$matrixJson" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "count=$($classes.Count)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

  tests:
    name: Tests â€¢ ${{ matrix.class }}
    needs: discover-tests
    if: ${{ needs.discover-tests.outputs.count != '0' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.discover-tests.outputs.matrix) }}
    env:
      CLASS: ${{ matrix.class }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore
        run: dotnet restore "${{ env.SOLUTION }}"

      - name: Build (Release)
        run: dotnet build "${{ env.SOLUTION }}" --no-restore --configuration Release

      # Assert at least one xUnit test contains "<namespace>.Tests.<CLASS>"
      - name: Ensure class exists in test list
        shell: pwsh
        run: |
          $list = dotnet test "${{ env.SOLUTION }}" --no-build --list-tests
          # Dump a small preview to logs for debugging
          $list | Select-Object -First 200
          if ($list -notmatch ("\.Tests\.$env:CLASS(\.|$)")) {
            throw "No tests found that match pattern '.Tests.$env:CLASS'. Example expected FQN: 'YourNamespace.Tests.$env:CLASS.<Method>'."
          }

      - name: Run tests (xUnit filter by FullyQualifiedName)
        run: |
          dotnet test "${{ env.SOLUTION }}" \
            --no-build --configuration Release \
            --filter "FullyQualifiedName~.Tests.${{ env.CLASS }}" \
            --logger "trx;LogFileName=${{ env.CLASS }}.trx" \
            --collect "XPlat Code Coverage"

      - name: Collect TRX & coverage artifacts
        shell: bash
        run: |
          mkdir -p artifacts/testresults artifacts/coverage
          find . -type f -path "*/TestResults/*.trx" -exec cp {} artifacts/testresults/ \; || true
          find . -type f -path "*/TestResults/*/coverage.cobertura.xml" -exec cp {} artifacts/coverage/ \; || true
          if [ -z "$(ls -A artifacts/testresults 2>/dev/null)" ]; then
            echo "No TRX produced for $CLASS" > artifacts/testresults/no-tests.txt
          fi

      - name: Upload TRX
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.class }}
          path: artifacts/testresults
          if-no-files-found: warn

      - name: Upload Coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.class }}
          path: artifacts/coverage
          if-no-files-found: warn

  summarize:
    name: Summary (Passed / Failed / Skipped)
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Download TRX artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: test-results-*
          merge-multiple: true
          path: downloads/testresults

      - name: Publish unit test summary
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: downloads/testresults/**/*.trx
          check_name: ".NET Tests Summary"
          comment_mode: off
          fail_on: nothing
