name: .NET Build & Split Tests

on:
  push:
    branches: ['**']          # run on all branches
  pull_request:
    branches: ['**']          # run for PRs targeting any branch
  workflow_dispatch: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  SOLUTION: AzureBatchJobAutomation.sln
  DOTNET_VERSION: '8.0.x'
  # If you want to be extra strict, set these to full namespaces:
  # e.g., BatchValidatorMockTest.Tests.BatchValidatorTests
  FILTER_BATCH: BatchValidatorTests
  FILTER_INTEGRATION: IntegrationTests
  FILTER_JOBEXECUTOR: JobExecutorTests

jobs:
  build:
    name: Build (Release)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore
        run: dotnet restore "${{ env.SOLUTION }}"

      - name: Build
        run: dotnet build "${{ env.SOLUTION }}" --no-restore --configuration Release

  test-batch-validator:
    name: Tests â€¢ BatchValidatorTests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      # Use PowerShell to robustly assert tests exist (no fragile grep)
      - name: Assert tests exist for ${{ env.FILTER_BATCH }}
        shell: pwsh
        run: |
          $list = dotnet test "${{ env.SOLUTION }}" --no-build --list-tests
          if ($list -notmatch [regex]::Escape("${{ env.FILTER_BATCH }}")) {
            Write-Error "No tests matched class name: $env:FILTER_BATCH. Consider setting full namespace in FILTER_BATCH."
            exit 1
          }

      - name: Test (only ${{ env.FILTER_BATCH }})
        run: |
          dotnet test "${{ env.SOLUTION }}" \
            --configuration Release --no-build \
            --filter "FullyQualifiedName~${{ env.FILTER_BATCH }}" \
            --logger "trx" \
            --collect "XPlat Code Coverage"

      - name: Gather artifacts
        shell: bash
        run: |
          mkdir -p artifacts/testresults artifacts/coverage
          find . -type f -path "*/TestResults/*.trx" -exec cp {} artifacts/testresults/ \; || true
          find . -type f -path "*/TestResults/*/coverage.cobertura.xml" -exec cp {} artifacts/coverage/ \; || true
          if [ -z "$(ls -A artifacts/testresults 2>/dev/null)" ]; then
            echo "No TRX produced (check test filter/results)" > artifacts/testresults/no-tests.txt
          fi

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-batchvalidator
          path: artifacts/testresults
          if-no-files-found: warn

      - name: Upload Coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-batchvalidator
          path: artifacts/coverage
          if-no-files-found: warn

  test-integration:
    name: Tests â€¢ IntegrationTests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Assert tests exist for ${{ env.FILTER_INTEGRATION }}
        shell: pwsh
        run: |
          $list = dotnet test "${{ env.SOLUTION }}" --no-build --list-tests
          if ($list -notmatch [regex]::Escape("${{ env.FILTER_INTEGRATION }}")) {
            Write-Error "No tests matched class name: $env:FILTER_INTEGRATION. Consider setting full namespace in FILTER_INTEGRATION."
            exit 1
          }

      - name: Test (only ${{ env.FILTER_INTEGRATION }})
        run: |
          dotnet test "${{ env.SOLUTION }}" \
            --configuration Release --no-build \
            --filter "FullyQualifiedName~${{ env.FILTER_INTEGRATION }}" \
            --logger "trx" \
            --collect "XPlat Code Coverage"

      - name: Gather artifacts
        shell: bash
        run: |
          mkdir -p artifacts/testresults artifacts/coverage
          find . -type f -path "*/TestResults/*.trx" -exec cp {} artifacts/testresults/ \; || true
          find . -type f -path "*/TestResults/*/coverage.cobertura.xml" -exec cp {} artifacts/coverage/ \; || true
          if [ -z "$(ls -A artifacts/testresults 2>/dev/null)" ]; then
            echo "No TRX produced (check test filter/results)" > artifacts/testresults/no-tests.txt
          fi

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-integration
          path: artifacts/testresults
          if-no-files-found: warn

      - name: Upload Coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-integration
          path: artifacts/coverage
          if-no-files-found: warn

  test-job-executor:
    name: Tests â€¢ JobExecutorTests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Assert tests exist for ${{ env.FILTER_JOBEXECUTOR }}
        shell: pwsh
        run: |
          $list = dotnet test "${{ env.SOLUTION }}" --no-build --list-tests
          if ($list -notmatch [regex]::Escape("${{ env.FILTER_JOBEXECUTOR }}")) {
            Write-Error "No tests matched class name: $env:FILTER_JOBEXECUTOR. Consider setting full namespace in FILTER_JOBEXECUTOR."
            exit 1
          }

      - name: Test (only ${{ env.FILTER_JOBEXECUTOR }})
        run: |
          dotnet test "${{ env.SOLUTION }}" \
            --configuration Release --no-build \
            --filter "FullyQualifiedName~${{ env.FILTER_JOBEXECUTOR }}" \
            --logger "trx" \
            --collect "XPlat Code Coverage"

      - name: Gather artifacts
        shell: bash
        run: |
          mkdir -p artifacts/testresults artifacts/coverage
          find . -type f -path "*/TestResults/*.trx" -exec cp {} artifacts/testresults/ \; || true
          find . -type f -path "*/TestResults/*/coverage.cobertura.xml" -exec cp {} artifacts/coverage/ \; || true
          if [ -z "$(ls -A artifacts/testresults 2>/dev/null)" ]; then
            echo "No TRX produced (check test filter/results)" > artifacts/testresults/no-tests.txt
          fi

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-jobexecutor
          path: artifacts/testresults
          if-no-files-found: warn

      - name: Upload Coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-jobexecutor
          path: artifacts/coverage
          if-no-files-found: warn

  summarize:
    name: ðŸ§¾ Summary (Passed / Failed / Skipped)
    runs-on: ubuntu-latest
    needs:
      - test-batch-validator
      - test-integration
      - test-job-executor
    steps:
      - name: Download TRX artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: test-results-*
          merge-multiple: true
          path: downloads/testresults

      - name: Build summary from TRX
        shell: pwsh
        run: |
          $trxFiles = Get-ChildItem -Path "downloads/testresults" -Recurse -Filter *.trx -ErrorAction SilentlyContinue
          if (-not $trxFiles) {
            "## Test Summary`nNo TRX files were downloaded. The earlier jobs may have found 0 matching tests." | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding UTF8
            exit 0
          }

          function N($v) { if ($null -eq $v -or $v -eq "") { 0 } else { [int]$v } }

          $total = 0; $passed = 0; $failed = 0; $skipped = 0
          $rows = @()

          foreach ($f in $trxFiles) {
            try {
              [xml]$xml = Get-Content $f.FullName
              $c = $xml.TestRun.ResultSummary.Counters
              $t_total   = N $c.total
              $t_passed  = N $c.passed
              $t_failed  = (N $c.failed) + (N $c.error)
              $t_skipped = (N $c.notExecuted) + (N $c.inconclusive) + (N $c.notRunnable) + (N $c.pending) + (N $c.aborted) + (N $c.timeout)

              $total  += $t_total
              $passed += $t_passed
              $failed += $t_failed
              $skipped+= $t_skipped

              $rows += "| $($f.Name) | $t_total | $t_passed | $t_failed | $t_skipped |"
            } catch {
              $rows += "| $($f.Name) | (parse error) | - | - | - |"
            }
          }

          "## Test Summary" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding UTF8
          "" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding UTF8
          "**Totals across all jobs**" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding UTF8
          "" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding UTF8
          "| Metric | Count |" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding UTF8
          "|---|---:|"       | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding UTF8
          "| Total | $total |"   | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding UTF8
          "| Passed | $passed |" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding UTF8
          "| Failed | $failed |" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding UTF8
          "| Skipped | $skipped |" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding UTF8
          "" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding UTF8
          "**Per-file (job) breakdown**" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding UTF8
          "" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding UTF8
          "| TRX File | Total | Passed | Failed | Skipped |" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding UTF8
          "|---|---:|---:|---:|---:|" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding UTF8
          foreach ($r in $rows) { $r | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding UTF8 }
