name: .NET Build & Test

on:
  push:
    branches: ['**']          # run on all branches
  pull_request:
    branches: ['**']          # run on PRs to any branch
  workflow_dispatch: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  SOLUTION: AzureBatchJobAutomation.sln
  DOTNET_VERSION: '8.0.x'

jobs:
  build:
    name: Build (Release)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore
        run: dotnet restore "${{ env.SOLUTION }}"

      - name: Build
        run: dotnet build "${{ env.SOLUTION }}" --no-restore --configuration Release

  test-batchvalidator:
    name: Tests â€¢ BatchValidatorTests
    runs-on: ubuntu-latest
    needs: build
    env:
      CLASS_FILTER: .Tests.BatchValidatorTests
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Assert tests exist
        shell: pwsh
        run: |
          $list = dotnet test "${{ env.SOLUTION }}" --no-build --list-tests
          if ($list -notmatch [regex]::Escape($env:CLASS_FILTER)) {
            Write-Error "No tests matched filter: $env:CLASS_FILTER"
            exit 1
          }

      - name: Test only ${{ env.CLASS_FILTER }}
        run: |
          dotnet test "${{ env.SOLUTION }}" \
            --configuration Release --no-build \
            --filter "FullyQualifiedName~${{ env.CLASS_FILTER }}" \
            --logger "trx" \
            --collect "XPlat Code Coverage"

      - name: Gather artifacts
        shell: bash
        run: |
          mkdir -p artifacts/testresults artifacts/coverage
          find . -type f -path "*/TestResults/*.trx" -exec cp {} artifacts/testresults/ \; || true
          find . -type f -path "*/TestResults/*/coverage.cobertura.xml" -exec cp {} artifacts/coverage/ \; || true
          [ -z "$(ls -A artifacts/testresults 2>/dev/null)" ] && echo "No TRX produced" > artifacts/testresults/no-tests.txt || true

      - name: Upload TRX
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-batchvalidator
          path: artifacts/testresults
          if-no-files-found: warn

      - name: Upload Coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-batchvalidator
          path: artifacts/coverage
          if-no-files-found: warn

  test-integration:
    name: Tests â€¢ IntegrationTests
    runs-on: ubuntu-latest
    needs: build
    env:
      CLASS_FILTER: .Tests.IntegrationTests
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Assert tests exist
        shell: pwsh
        run: |
          $list = dotnet test "${{ env.SOLUTION }}" --no-build --list-tests
          if ($list -notmatch [regex]::Escape($env:CLASS_FILTER)) {
            Write-Error "No tests matched filter: $env:CLASS_FILTER"
            exit 1
          }

      - name: Test only ${{ env.CLASS_FILTER }}
        run: |
          dotnet test "${{ env.SOLUTION }}" \
            --configuration Release --no-build \
            --filter "FullyQualifiedName~${{ env.CLASS_FILTER }}" \
            --logger "trx" \
            --collect "XPlat Code Coverage"

      - name: Gather artifacts
        shell: bash
        run: |
          mkdir -p artifacts/testresults artifacts/coverage
          find . -type f -path "*/TestResults/*.trx" -exec cp {} artifacts/testresults/ \; || true
          find . -type f -path "*/TestResults/*/coverage.cobertura.xml" -exec cp {} artifacts/coverage/ \; || true
          [ -z "$(ls -A artifacts/testresults 2>/dev/null)" ] && echo "No TRX produced" > artifacts/testresults/no-tests.txt || true

      - name: Upload TRX
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-integration
          path: artifacts/testresults
          if-no-files-found: warn

      - name: Upload Coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-integration
          path: artifacts/coverage
          if-no-files-found: warn

  test-jobexecutor:
    name: Tests â€¢ JobExecutorTests
    runs-on: ubuntu-latest
    needs: build
    env:
      CLASS_FILTER: .Tests.JobExecutorTests
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Assert tests exist
        shell: pwsh
        run: |
          $list = dotnet test "${{ env.SOLUTION }}" --no-build --list-tests
          if ($list -notmatch [regex]::Escape($env:CLASS_FILTER)) {
            Write-Error "No tests matched filter: $env:CLASS_FILTER"
            exit 1
          }

      - name: Test only ${{ env.CLASS_FILTER }}
        run: |
          dotnet test "${{ env.SOLUTION }}" \
            --configuration Release --no-build \
            --filter "FullyQualifiedName~${{ env.CLASS_FILTER }}" \
            --logger "trx" \
            --collect "XPlat Code Coverage"

      - name: Gather artifacts
        shell: bash
        run: |
          mkdir -p artifacts/testresults artifacts/coverage
          find . -type f -path "*/TestResults/*.trx" -exec cp {} artifacts/testresults/ \; || true
          find . -type f -path "*/TestResults/*/coverage.cobertura.xml" -exec cp {} artifacts/coverage/ \; || true
          [ -z "$(ls -A artifacts/testresults 2>/dev/null)" ] && echo "No TRX produced" > artifacts/testresults/no-tests.txt || true

      - name: Upload TRX
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-jobexecutor
          path: artifacts/testresults
          if-no-files-found: warn

      - name: Upload Coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-jobexecutor
          path: artifacts/coverage
          if-no-files-found: warn

  summarize:
    name: ðŸ§¾ Summary (Passed / Failed / Skipped)
    runs-on: ubuntu-latest
    needs:
      - test-batchvalidator
      - test-integration
      - test-jobexecutor
    steps:
      - name: Download TRX artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: test-results-*
          merge-multiple: true
          path: downloads/testresults

      - name: Publish Test Summary (TRX)
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: |
            downloads/testresults/**/*.trx
          check_name: "Batch Job Test Results Summary"
          comment_mode: off
          fail_on: nothing

      - name: Quick markdown totals (optional)
        shell: pwsh
        run: |
          $trxFiles = Get-ChildItem -Path "downloads/testresults" -Recurse -Filter *.trx -ErrorAction SilentlyContinue
          if (-not $trxFiles) { "## Test Summary`nNo TRX files found." | Out-File -FilePath $env:GITHUB_STEP_SUMMARY; exit 0 }
          function N($v){ if ($null -eq $v -or $v -eq "") {0} else {[int]$v} }
          $T=0;$P=0;$F=0;$S=0
          foreach($f in $trxFiles){ [xml]$x=Get-Content $f; $c=$x.TestRun.ResultSummary.Counters; $T+=N $c.total; $P+=N $c.passed; $F+=(N $c.failed)+(N $c.error); $S+=(N $c.notExecuted)+(N $c.inconclusive)+(N $c.notRunnable)+(N $c.pending)+(N $c.aborted)+(N $c.timeout) }
          "## Totals`n- Total: $T`n- Passed: $P`n- Failed: $F`n- Skipped: $S" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY
