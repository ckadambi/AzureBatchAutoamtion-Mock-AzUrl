name: .NET Build & Test

on:
  push:
    branches: ['**']
    paths:
      - '**/*.cs'
      - '**/*.csproj'
      - '.github/workflows/*.yml'
  pull_request:
    branches: ['**']
    paths:
      - '**/*.cs'
      - '**/*.csproj'
      - '.github/workflows/*.yml'
  workflow_dispatch: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        dotnet: ['8.0.x']

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet }}

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.os }}
          path: '**/bin/Release/net8.0'
          retention-days: 1

  validator-tests:
    needs: build
    name: Validator Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        dotnet: ['8.0.x']

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-${{ matrix.os }}
          path: bin/Release/net8.0

      - name: Run Validator Tests
        run: |
          dotnet test Tests/BatchValidatorTests.cs --configuration Release --no-build --verbosity normal --logger "trx;LogFileName=validator-tests.trx"
        continue-on-error: true

      - name: Generate Test Report
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Validator Test Results (${{ matrix.os }})
          path: "**/validator-tests.trx"
          reporter: dotnet-trx
          fail-on-error: false

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: validator-test-results-${{ matrix.os }}
          path: "**/validator-tests.trx"
          retention-days: 30

  executor-tests:
    needs: build
    name: Executor Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        dotnet: ['8.0.x']

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-${{ matrix.os }}
          path: bin/Release/net8.0

      - name: Run Executor Tests
        run: |
          dotnet test Tests/JobExecutorTests.cs --configuration Release --no-build --verbosity normal --logger "trx;LogFileName=executor-tests.trx"
        continue-on-error: true

      - name: Generate Test Report
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Executor Test Results (${{ matrix.os }})
          path: "**/executor-tests.trx"
          reporter: dotnet-trx
          fail-on-error: false

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: executor-test-results-${{ matrix.os }}
          path: "**/executor-tests.trx"
          retention-days: 30

  integration-tests:
    needs: build
    name: Integration Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        dotnet: ['8.0.x']

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-${{ matrix.os }}
          path: bin/Release/net8.0

      - name: Run Integration Tests
        run: |
          dotnet test Tests/IntegrationTests.cs --configuration Release --no-build --verbosity normal --logger "trx;LogFileName=integration-tests.trx"
        continue-on-error: true

      - name: Generate Integration Test Report
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Integration Test Results (${{ matrix.os }})
          path: "**/integration-tests.trx"
          reporter: dotnet-trx
          fail-on-error: false

      - name: Upload Integration Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results-${{ matrix.os }}
          path: "**/integration-tests.trx"
          retention-days: 30

  test-summary:
    needs: [validator-tests, executor-tests, integration-tests]
    if: always()
    runs-on: ubuntu-latest
    name: Test Summary
    steps:
      - name: Download Test Results
        uses: actions/download-artifact@v4
        with:
          path: test-results
          pattern: '*-test-results-*'
          merge-multiple: true

      - name: Publish Test Summary
        shell: pwsh
        run: |
          $testTypes = @{
            "Validator Tests" = "validator-tests.trx"
            "Executor Tests" = "executor-tests.trx"
            "Integration Tests" = "integration-tests.trx"
          }
          
          echo "## 📊 Test Summary" >> $env:GITHUB_STEP_SUMMARY
          
          foreach ($testType in $testTypes.Keys) {
            $files = Get-ChildItem -Path "test-results" -Filter $testTypes[$testType] -Recurse
            
            echo "### $testType" >> $env:GITHUB_STEP_SUMMARY
            foreach ($file in $files) {
                $content = Get-Content $file.FullName
                $passed = ([regex]::Matches($content, 'outcome="Passed"')).Count
                $failed = ([regex]::Matches($content, 'outcome="Failed"')).Count
                $skipped = ([regex]::Matches($content, 'outcome="Skipped"')).Count
                $total = $passed + $failed + $skipped
                
                echo "- 📝 Total: $total" >> $env:GITHUB_STEP_SUMMARY
                echo "- ✅ Passed: $passed" >> $env:GITHUB_STEP_SUMMARY
                echo "- ❌ Failed: $failed" >> $env:GITHUB_STEP_SUMMARY
                echo "- ⏭️ Skipped: $skipped" >> $env:GITHUB_STEP_SUMMARY
                echo "" >> $env:GITHUB_STEP_SUMMARY
            }
          }

   