name: .NET Build & Test (auto-split by class)

on:
  push:
    branches: ['**']          # run on all branches
  pull_request:
    branches: ['**']          # run for PRs targeting any branch
  workflow_dispatch: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  SOLUTION: BatchValidatorMockTest.sln
  DOTNET_VERSION: '8.0.x'

jobs:
  # Build once and also discover classes from the real test list
  discover:
    name: Build & discover test classes
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.discover.outputs.matrix }}
      count:  ${{ steps.discover.outputs.count }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore
        run: dotnet restore "${{ env.SOLUTION }}"

      - name: Build (Release)
        run: dotnet build "${{ env.SOLUTION }}" --no-restore --configuration Release

      - name: List tests & build class matrix
        id: discover
        shell: pwsh
        run: |
          # Get the list of tests from the built solution (xUnit)
          $list = dotnet test "${{ env.SOLUTION }}" --no-build --list-tests

          if (-not $list) {
            Write-Host "No tests listed."
            $empty = @{ class = @() } | ConvertTo-Json -Compress
            "matrix=$empty" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            "count=0"       | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            exit 0
          }

          # Each line is FQN.Method. Strip the last '.Method' to get class FQN, then take the class name.
          $classNames = New-Object System.Collections.Generic.HashSet[string]
          foreach ($line in $list) {
            if ([string]::IsNullOrWhiteSpace($line)) { continue }
            if ($line.Trim().StartsWith("The following Tests are available")) { continue }
            if ($line.Trim().StartsWith("Test run for")) { continue }
            if ($line.Trim().StartsWith("Discovering")) { continue }
            if ($line.Trim().StartsWith("Discovered")) { continue }

            # Keep only things that look like FQN.method
            if ($line -notmatch "\.") { continue }

            # Remove trailing method part
            $lastDot = $line.LastIndexOf(".")
            if ($lastDot -gt 0) {
              $classFqn = $line.Substring(0, $lastDot)
              # Get class name (last segment after dot)
              $cls = ($classFqn.Split(".") | Select-Object -Last 1).Trim()
              if ($cls) { $classNames.Add($cls) | Out-Null }
            }
          }

          if ($classNames.Count -eq 0) {
            Write-Host "No class names parsed from the test list."
            $empty = @{ class = @() } | ConvertTo-Json -Compress
            "matrix=$empty" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            "count=0"       | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            exit 0
          }

          $matrixObj = @{ class = @($classNames) }
          $json = $matrixObj | ConvertTo-Json -Compress
          Write-Host "Discovered test classes: $(@($classNames) -join ', ')"
          "matrix=$json" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "count=$($classNames.Count)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

  tests:
    name: Tests â€¢ ${{ matrix.class }}
    needs: discover
    if: ${{ needs.discover.outputs.count != '0' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.discover.outputs.matrix) }}
    env:
      CLASS: ${{ matrix.class }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      # Build again here to keep jobs self-contained on a fresh runner
      - name: Restore
        run: dotnet restore "${{ env.SOLUTION }}"
      - name: Build (Release)
        run: dotnet build "${{ env.SOLUTION }}" --no-restore --configuration Release

      # Sanity check: ensure at least one test contains ".Tests.<Class>."
      - name: Ensure class exists (from test list)
        shell: pwsh
        run: |
          $list = dotnet test "${{ env.SOLUTION }}" --no-build --list-tests
          # print first lines for visibility
          $list | Select-Object -First 100
          if ($list -notmatch ("\.(Tests)\.$env:CLASS(\.|$)")) {
            throw "No tests found matching pattern '.Tests.$env:CLASS'. Adjust class name if needed."
          }

      - name: Run tests for class (${{ env.CLASS }})
        run: |
          # xUnit filtering via FullyQualifiedName contains
          dotnet test "${{ env.SOLUTION }}" \
            --no-build --configuration Release \
            --filter "FullyQualifiedName~.Tests.${{ env.CLASS }}" \
            --logger "trx;LogFileName=${{ env.CLASS }}.trx" \
            --collect "XPlat Code Coverage"

      - name: Collect TRX & coverage
        shell: bash
        run: |
          mkdir -p artifacts/testresults artifacts/coverage
          find . -type f -path "*/TestResults/*.trx" -exec cp {} artifacts/testresults/ \; || true
          find . -type f -path "*/TestResults/*/coverage.cobertura.xml" -exec cp {} artifacts/coverage/ \; || true
          if [ -z "$(ls -A artifacts/testresults 2>/dev/null)" ]; then
            echo "No TRX produced for ${CLASS}" > artifacts/testresults/no-tests.txt
          fi

      - name: Upload TRX
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.class }}
          path: artifacts/testresults
          if-no-files-found: warn

      - name: Upload coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.class }}
          path: artifacts/coverage
          if-no-files-found: warn

  summarize:
    name: Summary (Passed / Failed / Skipped)
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Download TRX artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: test-results-*
          merge-multiple: true
          path: downloads/testresults

      - name: Publish unit test summary
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: downloads/testresults/**/*.trx
          check_name: ".NET Tests Summary"
          comment_mode: off
          fail_on: nothing
